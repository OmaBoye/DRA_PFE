from io import BytesIO
from django.template.loader import get_template
from xhtml2pdf import pisa
from openpyxl import Workbook


def generate_pdf_report(data, title):
    """
    Generate a PDF report from template and data
    Args:
        data: Dictionary containing report data
        title: Report title
    Returns:
        BytesIO buffer containing PDF content
    """
    try:
        # Load template
        template = get_template('reports/doctor_report.html')

        # Prepare context - modify this to match your template's expected variables
        context = {
            'title': title,
            'doctor': data.get('doctor'),
            'samples': data.get('samples', []),
            'start_date': data.get('start_date'),
            'end_date': data.get('end_date'),
            'report_type': data.get('report_type'),
            'generated_by': data.get('generated_by')
        }

        # Render template with context
        html = template.render(context)

        # Create PDF
        result = BytesIO()
        pdf = pisa.pisaDocument(BytesIO(html.encode("UTF-8")), result)

        if pdf.err:
            raise ValueError("PDF generation error")

        return result.getvalue()

    except Exception as e:
        raise ValueError(f"Failed to generate PDF: {str(e)}")


def generate_excel_report(data, title):
    """
    Generate an Excel report from data
    Args:
        data: Dictionary containing report data
        title: Report title
    Returns:
        BytesIO buffer containing Excel content
    """
    try:
        buffer = BytesIO()
        wb = Workbook()
        ws = wb.active
        ws.title = title[:30]  # Excel sheet name limit

        # Add headers
        ws.append(["Field", "Value"])

        # Add report metadata
        ws.append(["Report Title", title])
        ws.append(["Report Type", data.get('report_type', '')])
        ws.append(["Start Date", data.get('start_date', '')])
        ws.append(["End Date", data.get('end_date', '')])
        ws.append(["Generated By", data.get('generated_by', '')])
        ws.append([])  # Empty row

        # Add sample data if available
        if 'samples' in data:
            ws.append(["Sample ID", "Patient", "Status"])
            for sample in data['samples']:
                ws.append([
                    sample.get('barcode', ''),
                    sample.get('patient', {}).get('full_name', ''),
                    sample.get('result', {}).get('status', '')
                ])

        wb.save(buffer)
        buffer.seek(0)
        return buffer.getvalue()

    except Exception as e:
        raise ValueError(f"Failed to generate Excel report: {str(e)}")


def generate_csv_report(data, title):
    """
    Generate a CSV report from data
    Args:
        data: Dictionary containing report data
        title: Report title
    Returns:
        BytesIO buffer containing CSV content
    """
    try:
        buffer = BytesIO()

        # Write CSV header
        buffer.write(b"Field,Value\n")

        # Write metadata
        buffer.write(f"Report Title,{title}\n".encode())
        buffer.write(f"Report Type,{data.get('report_type', '')}\n".encode())
        buffer.write(f"Start Date,{data.get('start_date', '')}\n".encode())
        buffer.write(f"End Date,{data.get('end_date', '')}\n".encode())
        buffer.write(f"Generated By,{data.get('generated_by', '')}\n".encode())
        buffer.write(b"\n")  # Empty line

        # Write sample data if available
        if 'samples' in data:
            buffer.write(b"Sample ID,Patient,Status\n")
            for sample in data['samples']:
                buffer.write(f"{sample.get('barcode', '')},".encode())
                buffer.write(f"{sample.get('patient', {}).get('full_name', '')},".encode())
                buffer.write(f"{sample.get('result', {}).get('status', '')}\n".encode())

        buffer.seek(0)
        return buffer.getvalue()

    except Exception as e:
        raise ValueError(f"Failed to generate CSV report: {str(e)}")